import datetime
from typing import List

import grpc

from python_pachyderm.errors import AuthServiceNotActivated
from ..proto.v2.enterprise_v2 import TokenInfo
from ..proto.v2.license_v2 import (
    ApiStub as _LicenseApiStub,
    AddClusterResponse,
    GetActivationCodeResponse,
    ClusterStatus,
    UserClusterInfo,
)
from . import _synchronizer

# bp_to_pb: datetime.datetime -> timestamp_pb2.Timestamp


@_synchronizer
class LicenseApi(_synchronizer(_LicenseApiStub)):
    """A mixin for license-related functionality."""

    async def activate(
        self, activation_code: str, expires: datetime.datetime = None
    ) -> TokenInfo:
        """Activates the license service.

        Parameters
        ----------
        activation_code : str
            A Pachyderm enterprise activation code. New users can obtain trial
            activation codes.
        expires : datetime.datetime, optional
            A protobuf object indicating when this activation code will expire.
            This should generally not be set and is only applied if it is
            earlier than the signed expiration time of `activation_code`.

        Returns
        -------
        enterprise_proto.TokenInfo
            A protobuf object that has the expiration for the current token.
            Field will be unset if there is no current token.
        """
        response = await super().activate(
            activation_code=activation_code, expires=expires
        )
        return response.info

    async def add_cluster(
        self,
        id: str,
        address: str,
        secret: str = None,
        user_address: str = None,
        cluster_deployment_id: str = None,
        enterprise_server: bool = False,
    ) -> AddClusterResponse:
        """Register a cluster with the license service.

        Parameters
        ----------
        id : str
            The unique ID to identify the cluster.
        address : str
            The public GRPC address for the license server to reach the cluster.
        secret : str, optional
            A shared secret for the cluster to use to authenticate. If not
            specified, a random secret will be generated and returned.
        user_address : str, optional
            The pachd address for users to connect to.
        cluster_deployment_id : str, optional
            The deployment ID value generated by each cluster.
        enterprise_server : bool, optional
            Indicates whether the address points to an enterprise server.

        Returns
        -------
        license_proto.AddClusterResponse
            A protobuf object that returns the `secret`.
        """
        return await super().add_cluster(
            id=id,
            address=address,
            secret=secret,
            user_address=user_address,
            cluster_deployment_id=cluster_deployment_id,
            enterprise_server=enterprise_server,
        )

    async def update_cluster(
        self,
        id: str,
        address: str,
        user_address: str = None,
        cluster_deployment_id: str = None,
    ) -> None:
        """Update a cluster registered with the license service.

        Parameters
        ----------
        id : str
            The unique ID to identify the cluster.
        address : str
            The public GRPC address for the license server to reach the cluster.
        user_address : str, optional
            The pachd address for users to connect to.
        cluster_deployment_id : str, optional
            The deployment ID value generated by each cluster.
        """
        await super().update_cluster(
            id=id,
            address=address,
            user_address=user_address,
            cluster_deployment_id=cluster_deployment_id,
        )

    async def delete_cluster(self, id: str) -> None:
        """Delete a cluster registered with the license service.

        Parameters
        ----------
        id : str
            The unique ID to identify the cluster.
        """
        await super().delete_cluster(id=id)

    async def list_clusters(self) -> List[ClusterStatus]:
        """List clusters registered with the license service.

        Returns
        -------
        List[license_proto.ClusterStatus]
            A list of protobuf objects that return info on a cluster.
        """
        response = await super().list_clusters()
        return response.clusters

    async def get_activation_code(self) -> GetActivationCodeResponse:
        """Gets the enterprise code used to activate the server.

        Returns
        -------
        license_proto.GetActivationCodeResponse
            A protobuf object that returns a state enum, info on the token,
            and the activation code.
        """
        return await super().get_activation_code()

    async def delete_all(self) -> None:
        """Remove all clusters and deactivate the license service.

        Raises
        ------
        AuthServiceNotActivated
        """
        try:
            await super().delete_all()
        except grpc.RpcError as err:
            raise AuthServiceNotActivated.try_from(err)

    async def list_user_clusters(self) -> List[UserClusterInfo]:
        """Lists all clusters available to user.

        Returns
        -------
        List[license_proto.UserClusterInfo]
            A list of protobuf objects that return info on clusters
            available to the users.
        """
        response = await super().list_user_clusters()
        return response.clusters
